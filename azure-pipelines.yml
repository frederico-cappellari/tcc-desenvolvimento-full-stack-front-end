# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
   branches:
     include:
       - master
       - develop

pool:
  name: PROCERGS

variables:
  # Define o nome do ambiente com um valor padr√£o
  environmentName: 'des'

steps:
# Define o ambiente com base na branch
- powershell: |
    $branchName = "$(Build.SourceBranch)".Replace("refs/heads/", "")
    if ($branchName -eq "master") {
      Write-Output "##vso[task.setvariable variable=environmentName]prod"
    } elseif ($branchName -eq "develop") {
      Write-Output "##vso[task.setvariable variable=environmentName]hml"
    } else {
      Write-Output "##vso[task.setvariable variable=environmentName]des"
    }
  displayName: 'Set environmentName based on branch'

- task: NodeTool@0
  inputs:
    versionSpec: '20.12.x'
  displayName: 'Install Node.js'

# # Roda testes do Jest
# - task: Npm@1
#   displayName: 'Run test coverage Jest'
#   inputs:
#     command: 'custom'
#     customCommand: 'test -- --coverage'

# # Step 1: Download SonarScanner CLI for Windows
# - powershell: |
#     Invoke-WebRequest -Uri https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-windows.zip -OutFile sonar-scanner-cli-windows.zip
#     Expand-Archive -Path sonar-scanner-cli-windows.zip -DestinationPath .
#     $env:PATH = "$(System.DefaultWorkingDirectory)\sonar-scanner-4.7.0.2747-windows\bin;$env:PATH"
#     echo "##vso[task.setvariable variable=PATH]$env:PATH"
#   displayName: 'Download and extract SonarScanner CLI for Windows'

# # #Step 3: Run  Sonar
# - script: |
#     sonar-scanner.bat -Dsonar.projectKey=apm-angular-aap -Dsonar.sources=src/app/ -Dsonar.qualitygate.wait=true -Dsonar.host.url=https://sonar-9x.pro.intra.rs.gov.br/ -Dsonar.login=$(tokenSonar)
#   displayName: 'Run SonarScanner' 

# Executa o build para o ambiente
- task: Npm@1
  displayName: 'Run npm build'
  inputs:
    command: 'custom'
    customCommand: 'run build:$(environmentName)'

# Publica os artefatos de build para o destino correto
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact (profs02)'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\dist\procergs-apm-angular\browser'
    ArtifactName: dist
    publishLocation: FilePath
    TargetPath: '$(pastaPublicacao)'